<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Validator;

use Magento\Framework\Exception\LocalizedException;

/**
 * Class Vies
 * VIES service wrapper
 */
class Vies extends BaseValidator
{
    /**
     * Endpoint to connect to
     * @var $serviceUrl
     */
    public $serviceUrl = 'https://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl';

    /**
     * @var \SoapClient
     */
    public $soapClient;

    /**
     * @var Result
     */
    private $response;


    /**
     * Validate VAT number
     * @return void
     * @throws \SoapFault
     */
    public function validate()
    {
        try {
            $this->soapClient = $this->getSoapClient();

            $requesterCountryCode = $this->getParam('requesterCountryCode');
            $requesterVatNumber = $this->getParam('requesterVatNumber');

            if ($requesterCountryCode == 'GR') {
                $this->setParam('requesterCountryCode', 'EL');
            }

            if (!empty($requesterCountryCode)
                && !empty($requesterVatNumber)
                && $requesterCountryCode !== 'GB'
            ) {
                $response = $this->soapClient->checkVatApprox($this->params);
            } else {
                $response = $this->soapClient->checkVat($this->params);
            }

            if (!is_soap_fault($response)) {
                $this->logger->debug('[ViesValidation] response data', (array)$response);
            }
            //throw new \SoapFault('123', 'GLOBAL_MAX_CONCURRENT_REQ'); //for testing

            $this->buildResult($response);

            $this->eventManager->dispatch('vat_validation_after', [
                'validation_result' => $this->validationResult
            ]);

        } catch (\SoapFault $e) {
            $this->handleViesException($e->faultstring);
        }
    }

    private function handleViesException(string $faultstring)
    {
        if ($this->configHelper->isOfflineValidationEnabled()
            && $this->configHelper->isOfflineValidationCountry($this->getParam('countryCode'))
            && $this->syntaxValidator->isValid($this->getParam('vatNumber'), $this->getParam('countryCode'))
        ) {
            $this->validationResult = $this->getOfflineResult(); //offline result
        } else {
            $this->validationResult = $this->getResult(); //empty/new result

            if ($this->validationResult->getVatRequestId() == '') {
                $this->validationResult->setWarning(true);
                $this->validationResult->setRequestMessage(
                    __('VAT Number validation interface unavailable (' . $faultstring . ').')
                );
            }
            switch ($faultstring) {
                case 'INVALID_REQUESTER_INFO':
                case 'Empty Requester VAT number':
                    $this->validationResult->setVatRequestSuccess(false);
                    $this->validationResult->setRequestMessage(
                        __('Invalid requester information. Please check your merchant VAT number.')
                    );
                    $this->validationResult->setError(true);
                    $this->validationResult->setWarning(false);
                    break;
                case 'MS_UNAVAILABLE':
                    $this->validationResult->setVatRequestSuccess(false);
                    $this->validationResult->setRequestMessage(
                        __('Currently it is not possible to validate VAT numbers from this country.')
                    );
                    $this->validationResult->setWarning(true);
                    break;
                case 'TIMEOUT':
                    $this->validationResult->setVatRequestSuccess(false);
                    $this->validationResult->setRequestMessage(
                        __('The connection to the validation interface timed out. Please try again.')
                    );
                    $this->validationResult->setWarning(true);
                    break;
                case 'INVALID_INPUT':
                case 'Invalid_input':
                    $this->validationResult->setVatRequestSuccess(true);
                    $this->validationResult->setRequestMessage(__('The VAT number is invalid.'));
                    $this->validationResult->setError(true);
                    $this->validationResult->setWarning(false);
                    break;
                case 'GLOBAL_MAX_CONCURRENT_REQ':
                case 'GLOBAL_MAX_CONCURRENT_REQ_TIME':
                case 'MS_MAX_CONCURRENT_REQ':
                case 'MS_MAX_CONCURRENT_REQ_TIME':
                case 'SERVICE_UNAVAILABLE':
                    $this->validationResult->setVatRequestSuccess(false);
                    $this->validationResult->setRequestMessage(__('The VAT number validation service is busy.'));
                    $this->validationResult->setWarning(true);
                    break;
                default:
                    $this->validationResult->setRequestMessage($faultstring);
                    $this->validationResult->setError(true);
                    $this->validationResult->setWarning(false);
                    break;
            }
        }
        $this->logger->debug('[VIES] Exception: '.$faultstring.', '.$this->validationResult->getRequestMessage());
    }

    /**
     * Adds data to $this->validationResult
     *
     * @param \stdClass $response
     *
     * @return void
     */
    public function buildResult($response)
    {
        try {
            if (!isset($response->faultstring)) {
                $this->validationResult->setVatRequestSuccess(true);
            }

            foreach ($response as $key => $value) {
                switch ($key) {
                    case 'valid':
                        $this->validationResult->setVatIsValid((bool)$value);
                        break;
                    case 'countryCode':
                        $this->validationResult->setVatRequestCountryCode($value);
                        break;
                    case 'vatNumber':
                        $this->validationResult->setVatId($value);
                        break;
                    case 'requestDate':
                        $this->validationResult->setVatRequestDate(date("Y-m-d H:i:s", time()));
                        break;
                    case 'traderName':
                        $this->validationResult->setVatTraderName($value);
                        break;
                    case 'traderAddress':
                        $this->validationResult->setVatTraderAddress($value);
                        break;
                    case 'requestIdentifier':
                        $this->validationResult->setVatRequestId($value);
                        break;
                    case 'traderCompanyType':
                        $this->validationResult->setVatTraderCompanyType($value);
                        break;
                    default:
                        $this->validationResult->setData($key, $value);
                        break;
                }
            }

            $reqMsg = $this->validationResult->getRequestMessage();
            if ($this->validationResult->getVatIsValid()) {
                $this->validationResult->setRequestMessage(__('The VAT number is valid.'));
            } elseif (empty($reqMsg)) {
                $this->validationResult->setRequestMessage(__('The VAT number is invalid.'));
            }
        } catch (LocalizedException $e) {
            $this->logger->critical($e);
        }
    }

    /**
     * Create SOAP client based on VAT validation service WSDL
     * @return \SoapClient
     * @throws \SoapFault
     */
    protected function getSoapClient()
    {
        if ($this->configHelper->getIsIpv6Compat()) {
            $context = stream_context_create(['socket' => ['bindto' => $this->configHelper->getIPv4ToBindOn() . ':0']]);
            return new \SoapClient($this->serviceUrl, [
                'soap_version' => SOAP_1_1,
                'user_agent' => 'Magento2 Webshop',
                'cache_wsdl' => WSDL_CACHE_MEMORY,
                'stream_context'=> $context,
                'exceptions' => true,
            ]);
        } else {
            return new \SoapClient($this->serviceUrl, [
                'soap_version' => SOAP_1_1,
                'user_agent' => 'Magento2 Webshop',
                'cache_wsdl' => WSDL_CACHE_MEMORY,
                'exceptions' => true,
            ]);
        }
    }
}
