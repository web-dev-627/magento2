<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */
declare(strict_types=1);

namespace Geissweb\Euvat\Validator;

use Geissweb\Euvat\Api\Data\ValidationResultInterface;
use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Helper\Functions;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\Validation\ResultFactory;
use Geissweb\Euvat\Validator\Syntax as SyntaxValidator;


use Geissweb\Euvat\Model\ValidationRepository;

/**
 * Class Service is a wrapper for the actual validation process through different validation services
 */
class Service
{
    /**
     * @var Hmrc
     */
    private $hmrcValidator;
    /**
     * @var Vies
     */
    private $viesValidator;

    /**
     * @var ValidationResultInterface
     */
    private $response;
    /**
     * @var Logger
     */
    private $logger;
    /**
     * @var Configuration
     */
    private $configHelper;
    /**
     * @var SyntaxValidator
     */
    private $syntaxValidator;
    /**
     * @var ValidationRepository
     */
    private $validationRepository;
    /**
     * @var Functions
     */
    private $helper;
    /**
     * @var ResultFactory
     */
    private $validationResultFactory;


    /**
     * Service constructor.
     * @param Hmrc $hmrcValidator
     * @param \Geissweb\Euvat\Validator\Vies $viesValidator
     * @param Configuration $configHelper
     * @param Functions $functionsHelper
     * @param Syntax $syntaxValidator
     * @param ValidationRepository $validationRepository
     * @param ResultFactory $validationResultFactory
     * @param Logger $logger
     */
    public function __construct(
        Hmrc $hmrcValidator,
        Vies $viesValidator,
        Configuration $configHelper,
        Functions $functionsHelper,
        SyntaxValidator $syntaxValidator,
        ValidationRepository $validationRepository,
        ResultFactory $validationResultFactory,
        Logger $logger
    ) {
        $this->hmrcValidator = $hmrcValidator;
        $this->viesValidator = $viesValidator;
        $this->configHelper = $configHelper;
        $this->syntaxValidator = $syntaxValidator;
        $this->logger = $logger;
        $this->validationRepository = $validationRepository;
        $this->helper = $functionsHelper;
        $this->validationResultFactory = $validationResultFactory;
    }

    /**
     * @param string $countryCode
     * @param string $vatNumber
     * @return ValidationResultInterface
     * @throws \SoapFault
     */
    public function validate(string $countryCode, string $vatNumber): ValidationResultInterface
    {
        $this->logger->debug("[Validating $countryCode $vatNumber]");

        //Estimate if we can reuse an existing validation
        $needToValidate = $this->helper->getNeedToValidate($countryCode.$vatNumber);
        $dbValidation = $this->validationRepository->getByVatId($countryCode.$vatNumber);
        if ($dbValidation instanceof \Geissweb\Euvat\Api\Data\ValidationInterface && !$needToValidate) {
            $isValid = (bool)$dbValidation->getVatIsValid();
            $isRequestSuccess = (bool)$dbValidation->getVatRequestSuccess();
            if ($isValid && $isRequestSuccess) {
                $dbValidation->setRequestMessage(__('The VAT number is valid.'));
            } elseif (!$isValid && $isRequestSuccess) {
                $dbValidation->setRequestMessage(__('The VAT number is invalid.'));
            }
            $this->response = $this->validationResultFactory->create();
            $this->response->setVatRequestDate($dbValidation->getVatRequestDate())
                ->setRequestMessage($dbValidation->getRequestMessage())
                ->setVatIsValid($isValid)
                ->setVatRequestSuccess($isRequestSuccess)
                ->setVatId($dbValidation->getVatId())
                ->setVatTraderName($dbValidation->getVatTraderName())
                ->setVatTraderAddress($dbValidation->getVatTraderAddress())
                ->setVatRequestCountryCode($countryCode);
            return $this->response;
        }

        switch ($countryCode) {
            case 'GB':
                $this->hmrcValidator->setParam('countryCode', $countryCode);
                $this->hmrcValidator->setParam('vatNumber', $vatNumber);
                $this->hmrcValidator->validate();
                $this->response = $this->hmrcValidator->getResult();
                break;
            default:
                $this->viesValidator->setParam('countryCode', $countryCode);
                $this->viesValidator->setParam('vatNumber', $vatNumber);
                $this->viesValidator->validate();
                $this->response = $this->viesValidator->getResult();
                break;
        }

        return $this->response;
    }
}
