<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Validator;

use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\Validation\ResultFactory;
use Geissweb\Euvat\Validator\Syntax as SyntaxValidator;
use Magento\Framework\App\Request\Http;
use Magento\Framework\Event\ManagerInterface as EventManagerInterface;

/**
 * Class Base
 * A base class to handle service validation process
 */
class BaseValidator
{
    /**
     * Endpoint to connect to
     * @var $serviceUrl
     */
    public $serviceUrl;

    /**
     * Service client
     * @var $client
     */
    public $client;

    /**
     * Logger
     * @var Logger
     */
    public $logger;

    /**
     * Holder for validation params
     * @var array
     */
    public $params = [];

    /**
     * Service result
     * @var \Geissweb\Euvat\Api\Data\ValidationResultInterface
     */
    public $validationResult;

    /**
     * @var ResultFactory
     */
    public $validationResultFactory;

    /**
     * @var Http
     */
    public $request;

    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * @var SyntaxValidator
     */
    public $syntaxValidator;

    /**
     * @var EventManagerInterface
     */
    public $eventManager;

    /**
     * Service constructor
     *
     * @param Logger $logger
     * @param Configuration $configHelper
     * @param ResultFactory $validationResultFactory
     * @param Syntax $syntaxValidator
     * @param EventManagerInterface $eventManager
     * @param Http $request
     */
    public function __construct(
        Logger $logger,
        Configuration $configHelper,
        ResultFactory $validationResultFactory,
        SyntaxValidator $syntaxValidator,
        EventManagerInterface $eventManager,
        Http $request
    ) {
        $this->logger = $logger;
        $this->configHelper = $configHelper;
        $this->request = $request;
        $this->syntaxValidator = $syntaxValidator;
        $this->eventManager = $eventManager;

        $this->validationResultFactory = $validationResultFactory;
        $this->validationResult = $this->validationResultFactory->create();
        $this->validationResult
                    ->setRequesterCountryCode($this->configHelper->getMerchantCountryCode())
                    ->setRequesterNumber($this->configHelper->getMerchantVatNumber())
                    ->setHandle($this->request->getParam('handle'))
                    ->setVatRequestSuccess(false)
                    ->setVatIsValid(false);

        $this->setParam('requesterCountryCode', $this->configHelper->getMerchantCountryCode());
        $this->setParam('requesterVatNumber', $this->configHelper->getMerchantVatNumber());
    }

    /**
     * Sets validation parameters
     *
     * @param string $key
     * @param string $value
     *
     * @return void
     */
    public function setParam($key, $value)
    {
        $this->params[$key] = $value;
    }

    /**
     * Gets validation parameters
     *
     * @param string $key
     *
     * @return string
     */
    public function getParam(string $key)
    {
        return $this->params[$key];
    }

    /**
     * Gets validation parameters
     * @return array
     */
    public function getParams()
    {
        return $this->params;
    }

    /**
     * Returns validation result
     * @return \Geissweb\Euvat\Model\Validation\Result|\Geissweb\Euvat\Api\Data\ValidationResultInterface
     */
    public function getResult()
    {
        return $this->validationResult;
    }

    /**
     * Returns offline validation result
     * @return \Geissweb\Euvat\Model\Validation\Result
     */
    public function getOfflineResult()
    {
        /** @var \Geissweb\Euvat\Model\Validation\Result $offlineValidationResult */
        $offlineValidationResult = $this->validationResultFactory->create();
        $offlineValidationResult
            ->setRequesterCountryCode($this->configHelper->getMerchantCountryCode())
            ->setRequesterNumber($this->configHelper->getMerchantVatNumber())
            ->setHandle($this->request->getParam('handle'))
            ->setVatId($this->params['vatNumber'])
            ->setVatIsValid(true)
            ->setVatRequestCountryCode($this->params['countryCode'])
            ->setVatRequestDate(date("Y-m-d H:i:s"))
            ->setVatRequestId('OFFLINE')
            ->setVatRequestSuccess(false)
            ->setVatTraderName('')
            ->setVatTraderAddress('')
            ->setVatTraderCompanyType('')
            ->setRequestMessage(__('The VAT number is valid.'));
        return $offlineValidationResult;
    }
}
