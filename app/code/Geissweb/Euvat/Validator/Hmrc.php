<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

declare(strict_types=1);

namespace Geissweb\Euvat\Validator;

use DateTime;
use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\Validation\ResultFactory;
use Geissweb\Euvat\Validator\Syntax as SyntaxValidator;
use Magento\Framework\App\Request\Http;
use Magento\Framework\HTTP\ClientFactory;
use Magento\Framework\HTTP\ClientInterface;
use Magento\Framework\Serialize\Serializer\Json;
use Magento\Framework\Event\ManagerInterface as EventManagerInterface;

class Hmrc extends BaseValidator
{
    /**
     * Endpoint to connect to
     * @var $serviceUrl
     */
    public $serviceUrl = 'https://api.service.hmrc.gov.uk/organisations/vat/check-vat-number/lookup/';

    /**
     * @var \Magento\Framework\HTTP\ClientFactory
     */
    private $clientFactory;

    /**
     * @var Json
     */
    private $json;

    public function __construct(
        Logger $logger,
        Configuration $configHelper,
        ResultFactory $validationResultFactory,
        SyntaxValidator $syntaxValidator,
        EventManagerInterface $eventManager,
        Http $request,
        ClientFactory $clientFactory,
        Json $json
    ) {
        parent::__construct($logger, $configHelper, $validationResultFactory, $syntaxValidator, $eventManager, $request);
        $this->clientFactory = $clientFactory;
        $this->json = $json;
    }

    /**
     * Validate VAT number
     * @return void
     */
    public function validate()
    {
        $this->client = $this->getClient();

        if ($this->getParam('requesterCountryCode') !== 'GB') {
            $finalServiceUrl = $this->serviceUrl . $this->getParam('vatNumber');
        } else {
            $finalServiceUrl = $this->serviceUrl . $this->getParam('requesterVatNumber') . '/' . $this->getParam('vatNumber');
        }

        $this->client->get($finalServiceUrl);
        $response = $this->client->getBody();
        $array = $this->json->unserialize($response);
        $this->logger->debug('[HMRC] Request done | Status: '.$this->client->getStatus(), $array);

        $this->buildResult($array);
    }

    /**
     * Assembles data for $this->validationResult
     *
     * @param array $rawResponse
     *
     * @return void
     */
    private function buildResult(array $rawResponse)
    {
        if (!isset($rawResponse['target']) && isset($rawResponse['code'])) {
            $this->logger->debug("[HMRC] Error: " . $rawResponse['code'] ." ". $rawResponse['message']);

            if ($this->configHelper->isOfflineValidationEnabled()
                && $this->configHelper->isOfflineValidationCountry('GB')
                && $this->syntaxValidator->isValid($this->getParam('vatNumber'), $this->getParam('countryCode'))
            ) {
                $this->validationResult = $this->getOfflineResult(); //offline result
            } else {
                $this->validationResult->setVatId($this->getParam('vatNumber'));
                $this->validationResult->setVatRequestSuccess(true);
                $this->validationResult->setVatIsValid(false);
                $this->validationResult->setVatRequestDate(date("Y-m-d H:i:s"));

                switch ($rawResponse['code']) {
                    case 'INTERNAL_SERVER_ERROR':
                        $this->validationResult->setRequestMessage(__('The VAT number validation service is busy.'));
                        $this->validationResult->setWarning(true);
                        break;
                    case 'INVALID_REQUEST':
                    case 'NOT_FOUND':
                    default:
                        $this->validationResult->setRequestMessage(__('The VAT number is invalid.'));
                        $this->validationResult->setError(true);
                        $this->validationResult->setWarning(false);
                        break;
                }
            }

        } elseif (isset($rawResponse['target'])) {
            $this->logger->debug("[HMRC] Success");

            $this->validationResult->setVatIsValid(true);
            $this->validationResult->setVatRequestSuccess(true);

            foreach ($rawResponse['target'] as $key => $value) {
                switch ($key) {
                    case 'vatNumber':
                        $this->validationResult->setVatId($value);
                        break;
                    case 'name':
                        $this->validationResult->setVatTraderName($value);
                        break;
                    case 'address':
                        if (is_array($value)) {
                            $this->validationResult->setVatTraderAddress(join("\n", $value));
                            if (isset($value['countryCode'])) {
                                $this->validationResult->setVatRequestCountryCode($value['countryCode']);
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
            if (isset($rawResponse['consultationNumber'])) {
                $this->validationResult->setVatRequestId($rawResponse['consultationNumber']);
            }
            if (isset($rawResponse['processingDate'])) {
                // 2021-05-14T14:59:07+01:00
                $date = DateTime::createFromFormat('Y-m-d\TH:i:sP', $rawResponse['processingDate']);
                $this->validationResult->setVatRequestDate($date->format("Y-m-d H:i:s"));
            }

            $reqMsg = $this->validationResult->getRequestMessage();
            if ($this->validationResult->getVatIsValid()) {
                $this->validationResult->setRequestMessage(__('The VAT number is valid.'));
            } elseif (empty($reqMsg)) {
                $this->validationResult->setRequestMessage(__('The VAT number is invalid.'));
            }

            $this->eventManager->dispatch('vat_validation_after', [
                'validation_result' => $this->validationResult
            ]);
        }
    }

    /**
     * @return ClientInterface
     */
    public function getClient(): ClientInterface
    {
        return $this->clientFactory->create();
    }
}
