<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2020 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Helper\Uk;

use Geissweb\Euvat\Logger\Logger;
use Magento\Backend\Model\Session\Quote;
use Magento\Checkout\Model\Session;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Pricing\PriceCurrencyInterface;
use Magento\Quote\Api\CartRepositoryInterface;
use Magento\Quote\Api\Data\CartInterface;
use Magento\Store\Model\StoreManagerInterface;

/**
 * Calculates 135 GBP Threshold
 */
class ThresholdCalculator
{
    /**
     * @var CartInterface|\Magento\Quote\Model\Quote $quote
     */
    public $currentQuote = null;
    /**
     * @var Session
     */
    private $checkoutSession;
    /**
     * @var CartRepositoryInterface
     */
    private $cartRepository;
    /**
     * @var PriceCurrencyInterface
     */
    private $priceCurrency;
    /**
     * @var StoreManagerInterface
     */
    private $storeManager;
    /**
     * @var Logger
     */
    private $logger;
    /**
     * @var Quote
     */
    private $backendSessionQuote;

    /**
     * ThresholdCalculator constructor.
     *
     * @param Session                 $checkoutSession
     * @param CartRepositoryInterface $cartRepository
     * @param PriceCurrencyInterface  $priceCurrency
     * @param StoreManagerInterface   $storeManager
     * @param Quote                   $backendSessionQuote
     * @param Logger                  $logger
     */
    public function __construct(
        Session $checkoutSession,
        CartRepositoryInterface $cartRepository,
        PriceCurrencyInterface $priceCurrency,
        StoreManagerInterface $storeManager,
        Quote $backendSessionQuote,
        Logger $logger
    ) {
        $this->checkoutSession = $checkoutSession;
        $this->cartRepository = $cartRepository;
        $this->logger = $logger;
        $this->priceCurrency = $priceCurrency;
        $this->storeManager = $storeManager;
        $this->backendSessionQuote = $backendSessionQuote;

        // Get admin quote
        $adminSessionQuoteId = $this->backendSessionQuote->getQuoteId();
        if (!empty($adminSessionQuoteId)) {
            try {
                $this->currentQuote = $this->cartRepository->get($adminSessionQuoteId);
            } catch (NoSuchEntityException $e) {
                $this->logger->critical($e);
            }
        }

        // Get frontend quote
        $quoteId = $this->checkoutSession->getQuoteId();
        if (!empty($quoteId)) {
            try {
                $this->currentQuote = $this->cartRepository->get($quoteId);
            } catch (NoSuchEntityException $e) {
                $this->logger->critical($e);
            }
        }
    }

    /**
     * @return bool
     */
    public function isDeliveryToUk()
    {
        if ($this->currentQuote !== null) {
            if ($this->currentQuote->getIsVirtual()) {
                return false;
            }
            return $this->isAddressInUk($this->currentQuote->getShippingAddress());
        }

        return false;
    }

    /**
     * @param $address
     *
     * @return bool
     */
    public function isAddressInUk($address)
    {
        $countryId = $address->getCountryId();
        $postCode = $address->getPostcode();
        $result = $countryId === 'GB' && substr($postCode, 0, 2) != 'BT';
        $this->logger->debug("UkThresholdCalculator country is $countryId ($postCode): " . (int)$result);
        return $result;
    }

    /**
     * @param int|float $threshold
     *
     * @return bool
     */
    public function isCurrentCartAbove($threshold)
    {
        if ($this->currentQuote !== null) {
            return $this->getPriceInGBP($this->currentQuote->getSubtotalWithDiscount()) > $threshold;
        }

        return false;
    }

    /**
     * @param $price
     * @return float
     */
    public function getPriceInGBP($price)
    {
        if ($this->isNeedToConvert()) {
            $priceInGBP = $this->priceCurrency->convert($price, null, 'GBP');
            $this->logger->debug("UkThresholdCalculator converted $price in GBP: $priceInGBP");
            return $priceInGBP;
        }
        $this->logger->debug("UkThresholdCalculator price is $price");
        return $price;
    }

    /**
     * @return bool
     */
    private function isNeedToConvert()
    {
        return $this->priceCurrency->getCurrency()->getCurrencyCode() !== 'GBP';
    }
}
