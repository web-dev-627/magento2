<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Block\Adminhtml;

use Geissweb\Euvat\Helper\Compat\JsonFactory;
use Geissweb\Euvat\Helper\Configuration;
use Magento\Backend\Block\Template\Context;
use Magento\Backend\Block\Widget\Form\Renderer\Fieldset\Element;
use Magento\Framework\Json\EncoderInterface;

/**
 * Replace core VAT validation on admin sales_order_create
 * Class SalesOrderAddressFormRendererVat
 */
class SalesOrderAddressFormRendererVat extends Element
{

    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * Validate button block
     *
     * @var null|\Magento\Backend\Block\Widget\Button
     */
    protected $_validateButton = null;

    /**
     * @var string
     */
    protected $_template = 'Magento_Customer::sales/order/create/address/form/renderer/vat.phtml';

    /**
     * @var mixed
     */
    protected $_jsonEncoder;

    /**
     * @var string
     */
    public $_jsonMethod = 'serialize';

    /**
     * @param Configuration      $configHelper
     * @param Context   $context
     * @param JsonFactory $jsonEncoder
     * @param array                                     $data
     */
    public function __construct(
        Configuration $configHelper,
        Context $context,
        JsonFactory $jsonEncoder,
        array $data = []
    ) {
        $this->_jsonEncoder = $jsonEncoder->create();
        if ($this->_jsonEncoder instanceof EncoderInterface) {
            $this->_jsonMethod = 'encode';
        }
        $this->configHelper = $configHelper;
        parent::__construct($context, $data);
    }

    /**
     * Retrieve validate button block
     *
     * @return \Magento\Backend\Block\Widget\Button
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function getValidateButton()
    {
        if ($this->_validateButton === null) {
            /** @var $form \Magento\Framework\Data\Form */
            $form = $this->_element->getForm();
            $vatElementId = $this->_element->getHtmlId();
            $countryElementId = $form->getElement('country_id')->getHtmlId();

            $adminVatFieldConfig = $this->configHelper->getAdminVatFieldConfig();
            $validateUrl = isset($adminVatFieldConfig['validationUrl']) ? $adminVatFieldConfig['validationUrl'] : '';

            $groupMessage = __('The customer is now assigned to Customer Group %s.') . ' '
                            . __('Would you like to change the Customer Group for this order?');

            $jsonMethod = $this->_jsonMethod;
            $vatValidateOptions = $this->_jsonEncoder->$jsonMethod([
                    'vatElementId' => $vatElementId,
                    'countryElementId' => $countryElementId,
                    'groupIdHtmlId' => 'group_id',
                    'validateUrl' => $validateUrl,
                    'vatValidMessage' => __('The VAT ID is valid.'),
                    'vatInvalidMessage' => __('The VAT ID entered (%s) is not a valid VAT ID.'),
                    'vatValidAndGroupValidMessage' => __('The VAT ID is valid. The current Customer Group will be used.'),
                    'vatValidAndGroupInvalidMessage' => __('The VAT ID is valid but no Customer Group is assigned for it.'),
                    'vatValidAndGroupChangeMessage' => __('Based on the VAT ID, the customer belongs to the Customer Group %s.') . "\n" . $groupMessage,
                    'vatValidationFailedMessage' => __('Something went wrong while validating the VAT ID.'),
                    'vatCustomerGroupMessage' => __('The customer would belong to Customer Group %s.'),
                    'vatGroupErrorMessage' => __('There was an error detecting Customer Group.'),

                    'emptyValueMessage' => __('Please enter a VAT number to validate.'),
                    'traderName' => __('Registered Company Name: %s'),
                    'traderAddress' => __('Registered Address: %s')
            ]);

            $optionsVarName = $this->getJsVariablePrefix() . 'VatParameters';
            $beforeHtml = '<script>var ' . $optionsVarName . ' = ' . $vatValidateOptions . ';</script>';

            $this->_validateButton = $this->getLayout()->createBlock(\Magento\Backend\Block\Widget\Button::class)
               ->setData([
                    'label' => __('Validate') . ' ' . __('VAT Number'),
                    'before_html' => $beforeHtml,
                    'onclick' => 'order.validateVat(' . $optionsVarName . ', this)',
                ]);
        }
        return $this->_validateButton;
    }
}
