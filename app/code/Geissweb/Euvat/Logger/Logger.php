<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Logger;

use Magento\Customer\Model\Data\Address;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\DataObject;
use Magento\Store\Model\ScopeInterface;
use Monolog\Handler\StreamHandler;

/**
 * For easy logging...
 * Class Logger
 */
class Logger extends \Monolog\Logger
{
    /**
     * @var ScopeConfigInterface
     */
    public $scopeConfig;

    /**
     * @param string $name The logging channel
     * @param HandlerInterface[] $handlers Optional stack of handlers, the first one in the array is called first, etc.
     * @param ScopeConfigInterface $scopeConfig
     */
    public function __construct(
        ScopeConfigInterface $scopeConfig,
        $name = 'VAT',
        $handlers = []
    ) {
        parent::__construct($name, $handlers, []);
        $this->scopeConfig = $scopeConfig;
    }

    /**
     * @param DataObject|Address $address
     */
    public function debugAddress($address)
    {
        if (is_object($address)) {
            $debug = [
                'id' => $address->getId(),
                'customer_id' => $address->getCustomerId(),
                'country_id' => $address->getCountryId(),
                'zip' => $address->getPostcode(),
                'vat_id' => $address->getVatId()
            ];
            $this->debug("address (" . get_class($address) . "): " . var_export($debug, true));
        }
    }

    /**
     * Adds a log record.
     *
     * @param  integer $level   The logging level
     * @param  string  $message The log message
     * @param  array   $context The log context
     *
     * @return Boolean Whether the record has been processed
     * @throws \Exception
     */
    public function addRecord($level, $message, array $context = [])
    {
        if ($this->scopeConfig->getValue('euvat/mod_info/debug', ScopeInterface::SCOPE_STORE) == true) {
            if (!$this->handlers) {
                $this->pushHandler(new StreamHandler('php://stderr', static::DEBUG));
            }

            $levelName = static::getLevelName($level);

            // check if any handler will handle this message so we can return early and save cycles
            $handlerKey = null;
            foreach ($this->handlers as $key => $handler) {
                if ($handler->isHandling(['level' => $level])) {
                    $handlerKey = $key;
                    break;
                }
            }

            if (null === $handlerKey) {
                return false;
            }

            if (!static::$timezone) {
                static::$timezone = new \DateTimeZone(date_default_timezone_get() ?: 'UTC');
            }

            $record = [
                'message' => (string) $message,
                'context' => $context,
                'level' => $level,
                'level_name' => $levelName,
                'channel' => $this->name,
                'datetime' => \DateTime::createFromFormat(
                    'U.u',
                    sprintf('%.6F', microtime(true)),
                    static::$timezone
                )->setTimezone(static::$timezone),
                'extra' => [],
            ];

            foreach ($this->processors as $processor) {
                $record = call_user_func($processor, $record);
            }
            while (isset($this->handlers[$handlerKey]) &&
                   false === $this->handlers[$handlerKey]->handle($record)) {
                $handlerKey++;
            }

            return true;
        }

        return false;
    }
}
