<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

declare(strict_types=1);

namespace Geissweb\Euvat\Controller\Adminhtml\Validation;

use Geissweb\Euvat\Api\Data\ValidationInterface;
use Geissweb\Euvat\Model\ValidationRepository;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Backend\Model\View\Result\Redirect;
//use Magento\Framework\App\Action\HttpGetActionInterface;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Exception\LocalizedException;

class Delete extends Action //implements HttpGetActionInterface
{
    /**
     * @var ValidationRepository
     */
    protected $validationRepository;

    /**
     * @var ResultFactory
     */
    protected $resultFactory;

    /**
     * Delete constructor.
     *
     * @param Context $context
     * @param ValidationRepository $validationRepository
     * @param ResultFactory $resultFactory
     */
    public function __construct(
        Context $context,
        ValidationRepository $validationRepository,
        ResultFactory $resultFactory
    ) {
        parent::__construct($context);
        $this->validationRepository = $validationRepository;
        $this->resultFactory = $resultFactory;
    }

    /**
     * @return Redirect
     * @throws LocalizedException
     */
    public function execute()
    {
        /** @var Redirect $redirectResult */
        $redirectResult = $this->resultFactory->create(ResultFactory::TYPE_REDIRECT);
        $id = $this->getRequest()->getParam('id');
        $existingValidation = $this->validationRepository->getById($id);
        if (!$existingValidation instanceof ValidationInterface) {
            $this->messageManager->addErrorMessage(__('Validation result not found.'));
            return $redirectResult->setPath('euvat/validation/index');
        }

        try {
            $this->validationRepository->deleteById($id);
            $this->messageManager->addSuccessMessage(
                __(sprintf('Validation result for VAT number %s was deleted.', $existingValidation->getVatId()))
            );
        } catch (LocalizedException $e) {
            $this->messageManager->addErrorMessage($e->getMessage());
        } catch (\Exception $e) {
            $this->messageManager->addErrorMessage(__('Error while deleting the validation result.'));
        }
        return $redirectResult->setPath('euvat/validation/index');
    }
}
