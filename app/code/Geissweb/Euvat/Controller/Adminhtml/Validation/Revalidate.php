<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */
declare(strict_types=1);

namespace Geissweb\Euvat\Controller\Adminhtml\Validation;

use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Helper\Functions;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Validator\Service;
use Geissweb\Euvat\Model\ValidationRepository;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
//use Magento\Framework\App\Action\HttpGetActionInterface;
use Magento\Framework\Controller\Result\Redirect as RedirectResult;
use Magento\Framework\Controller\ResultFactory;

class Revalidate extends Action //implements HttpGetActionInterface
{
    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * @var Service
     */
    public $service;

    /**
     * @var Context
     */
    public $context;

    /**
     * @var Logger
     */
    public $logger;

    /**
     * @var Functions
     */
    public $functionsHelper;

    /**
     * @var ValidationRepository
     */
    private $validationRepository;

    /**
     * Constructor
     *
     * @param Context $context
     * @param Service $service
     * @param ValidationRepository $validationRepository
     * @param Logger $logger
     *
     * @internal param \Magento\Framework\Json\Helper\Data $jsonHelper
     */
    public function __construct(
        Context $context,
        Service $service,
        ValidationRepository $validationRepository,
        Logger $logger
    ) {
        parent::__construct($context);
        $this->context = $context;
        $this->service = $service;
        $this->validationRepository = $validationRepository;
        $this->logger = $logger;
    }

    /**
     * Execute VAT number validation
     * @return JsonResult|RawResult|RedirectResult
     */
    public function execute()
    {
        /** @var \Magento\Backend\Model\View\Result\Redirect $redirectResult */
        $redirectResult = $this->resultFactory->create(ResultFactory::TYPE_REDIRECT);
        $id = $this->getRequest()->getParam('id');
        $existingValidation = $this->validationRepository->getById($id);
        if (!$existingValidation instanceof \Geissweb\Euvat\Api\Data\ValidationInterface) {
            $this->messageManager->addErrorMessage(__('Validation object is not implementing ValidationInterface.'));
            return $redirectResult->setPath('euvat/validation/index');
        }

        try {
            $vatCc = substr($existingValidation->getVatId(), 0, 2);
            $vatNumberWithoutCc = str_replace($vatCc, '', $existingValidation->getVatId());

            $result = $this->service->validate($vatCc, $vatNumberWithoutCc);

            if ($result->getVatIsValid()) {
                $this->messageManager->addSuccessMessage(
                    __('The VAT number ' . $result->getVatId() . ' is valid.')
                );
            } else {
                $this->messageManager->addErrorMessage(__('The VAT number ' . $result->getVatId() . ' is invalid.'));
            }

            return $redirectResult->setPath('euvat/validation/index');
        } catch (\Magento\Framework\Exception\LocalizedException $e) {
            $this->messageManager->addErrorMessage($e->getMessage());
        } catch (\Exception $e) {
            switch ($e->getMessage()) {
                case 'INVALID_REQUESTER_INFO':
                case 'Empty Requester VAT number':
                    $msg = __('Invalid requester information. Please check your merchant VAT number.');
                    break;
                case 'MS_UNAVAILABLE':
                    $msg = __('Currently it is not possible to validate VAT numbers from this country.');
                    break;
                case 'TIMEOUT':
                    $msg = __('The connection to the validation interface timed out. Please try again.');
                    break;
                case 'INVALID_INPUT':
                case 'Invalid_input':
                    $msg = __('The VAT number is invalid.');
                    break;
                case 'GLOBAL_MAX_CONCURRENT_REQ':
                case 'GLOBAL_MAX_CONCURRENT_REQ_TIME':
                case 'MS_MAX_CONCURRENT_REQ':
                case 'MS_MAX_CONCURRENT_REQ_TIME':
                case 'SERVICE_UNAVAILABLE':
                    $msg = __('The VAT number validation service is busy.');
                    break;
                default:
                    $msg = __('Exception: ' . $e->getMessage() . '. Please try again later.');
                    break;
            }
            $this->messageManager->addExceptionMessage($e, $msg);
        }
        return $redirectResult->setPath('euvat/validation/index');
    }

    /**
     * {@inheritdoc}
     */
    public function _isAllowed()
    {
        return $this->_authorization->isAllowed('Geissweb_Euvat::validation_usage');
    }
}
