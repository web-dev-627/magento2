<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Observer;

use Geissweb\Euvat\Helper\Functions;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\Validation\ResultFactory;
use Geissweb\Euvat\Validator\Syntax;
use Geissweb\Euvat\Validator\ViesFactory;
use Geissweb\Euvat\Model\ValidationRepository;
use Geissweb\Euvat\Helper\VatNumber\Formatter;
use Magento\Customer\Model\ResourceModel\AddressRepository;
use Magento\Framework\Event\ManagerInterface as EventManager;
use Magento\Framework\Event\Observer;
use Magento\Framework\Event\ObserverInterface;
use Magento\Framework\Exception\LocalizedException;
use SoapFault;

/**
 * Class CustomerLogin
 */
class CustomerLogin implements ObserverInterface
{
    /**
     * @var ValidationRepository
     */
    public $validationRepository;

    /**
     * @var Logger
     */
    public $logger;

    /**
     * @var EventManager
     */
    public $eventManager;

    /**
     * @var Functions
     */
    private $functionsHelper;

    /**
     * @var \Geissweb\Euvat\Validator\Vies
     */
    private $viesService;

    /**
     * @var AddressRepository
     */
    private $addressRepository;
    /**
     * @var Formatter
     */
    private $formatter;
    /**
     * @var Syntax
     */
    private $syntaxValidator;
    /**
     * @var ResultFactory
     */
    private $validationResultFactory;

    /**
     * Constructor
     *
     * @param ValidationRepository $validationRepository
     * @param ViesFactory          $viesService
     * @param Functions            $functionsHelper
     * @param Formatter            $formatter
     * @param Logger               $logger
     * @param AddressRepository    $addressRepository
     * @param EventManager         $eventManager
     * @param Syntax               $syntaxValidator
     * @param ResultFactory        $validationResultFactory
     */
    public function __construct(
        ValidationRepository $validationRepository,
        ViesFactory $viesService,
        Functions $functionsHelper,
        Formatter $formatter,
        Logger $logger,
        AddressRepository $addressRepository,
        EventManager $eventManager,
        Syntax $syntaxValidator,
        ResultFactory $validationResultFactory
    ) {
        $this->validationRepository = $validationRepository;
        $this->logger               = $logger;
        $this->functionsHelper      = $functionsHelper;
        $this->viesService          = $viesService;
        $this->addressRepository = $addressRepository;
        $this->eventManager = $eventManager;
        $this->formatter = $formatter;
        $this->syntaxValidator = $syntaxValidator;
        $this->validationResultFactory = $validationResultFactory;
    }

    /**
     * @param Observer $observer
     */
    public function execute(Observer $observer)
    {
        try {
            /** @var \Magento\Customer\Model\Customer $customer */
            $customer = $observer->getEvent()->getCustomer();

            if ($customer instanceof \Magento\Customer\Model\Customer
               && $this->functionsHelper->configHelper->isPeriodicRevalidationEnabled()
            ) {
                $addressCount = $customer->getAddressesCollection()->getSize();
                $i=0;

                /** @var \Magento\Customer\Model\Address $address */
                foreach ($customer->getAddressesCollection() as $address) {
                    $i++;
                    $vatId = $this->formatter->formatVatNumber($address->getVatId(), $address->getCountryId());
                    if (empty($vatId)) {
                        continue;
                    }
                    $this->logger->debug("[CustomerLoginObserver] address $i of $addressCount with vatid: $vatId");
                    $needValidate = $this->functionsHelper->getNeedToValidate($vatId);

                    if ($needValidate) {
                        try {
                            /** @var \Geissweb\Euvat\Validator\Vies $service */
                            $service = $this->viesService->create();
                            $this->logger->debug("[CustomerLoginObserver] Now revalidating: $vatId");
                            $vatNumber = $this->formatter->splitVatNumber($vatId);
                            $service->setParam('countryCode', $vatNumber['cc']);
                            $service->setParam('vatNumber', $vatNumber['number']);
                            $service->validate();
                            /** @var \Geissweb\Euvat\Api\Data\ValidationResultInterface $response */
                            $response = $service->getResult();
                            $this->eventManager->dispatch('vat_validation_after', [
                                'validation_result' => $response
                            ]);
                            $addressUpdateData = [
                                'vat_id' => $vatId,
                                'vat_is_valid' => $response->getVatIsValid(),
                                'vat_request_date' => $response->getVatRequestDate(),
                                'vat_request_id' => $response->getVatRequestId(),
                                'vat_request_success' => $response->getVatRequestSuccess(),
                                'vat_trader_name' => $response->getVatTraderName(),
                                'vat_trader_address' => $response->getVatTraderAddress()
                            ];
                            $repoAddress = $this->addressRepository->getById($address->getId());
                            foreach ($addressUpdateData as $key => $data) {
                                $repoAddress->setData($key, $data);
                            }
                            $this->addressRepository->save($repoAddress);
                            $this->logger->debug("[CustomerLoginObserver] revalidated data for $vatId");
                        } catch (SoapFault $e) {
                            $this->logger->debug(
                                "[CustomerLoginObserver] Unable to validate $vatId: " . $e->faultstring
                            );
                        }
                    }
                }
            }
        } catch (LocalizedException $e) {
            $this->logger->addError($e->getMessage());
        } catch (\Exception $e) {
            $this->logger->addError($e->getMessage());
        }
    }
}
