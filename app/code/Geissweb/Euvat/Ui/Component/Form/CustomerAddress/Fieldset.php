<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Ui\Component\Form\CustomerAddress;

use Geissweb\Euvat\Helper\Configuration;
use Magento\Framework\View\Element\UiComponent\ContextInterface;
use Magento\Framework\View\Element\UiComponentInterface;
use Magento\Ui\Component\Form\FieldFactory;

/**
 * Class Fieldset
 */
class Fieldset extends \Magento\Ui\Component\Form\Fieldset //\Magento\Customer\Ui\Component\Form\AddressFieldset 2.3.1+
{
    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * @var FieldFactory
     */
    private $fieldFactory;

    /**
     * Fieldset constructor.
     *
     * @param ContextInterface $context
     * @param FieldFactory     $fieldFactory
     * @param Configuration    $configHelper
     * @param array            $components
     * @param array            $data
     */
    public function __construct(
        ContextInterface $context,
        FieldFactory $fieldFactory,
        Configuration $configHelper,
        array $components = [],
        array $data = []
    ) {
        parent::__construct($context, $components, $data);
        $this->fieldFactory = $fieldFactory;
        $this->configHelper = $configHelper;
        $this->components = $components;
    }

    /**
     * Get components
     *
     * @return UiComponentInterface[]
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getChildComponents()
    {
        if (!class_exists(\Magento\Customer\Ui\Component\Form\AddressFieldset::class)) { //exist from 2.3.1
            foreach ($this->components as $component) {
                if ($component->getName() === 'vat_id') {
                    $baseConfig = $component->getData('config');
                    $additionalConfig = $this->configHelper->getAdminVatFieldConfig();
                    $finalConfig = array_merge($baseConfig, $additionalConfig);
                    $component->setData('config', $finalConfig);
                }
            }

            $vatFields = [
                'vat_is_valid' => [
                    'label' => __('VAT number is valid'),
                    'formElement' => 'input',
                    'visible' => true,
                    'disabled' => true,
                    'source' => 'address',
                    'sortOrder' => 170
                ],
                'vat_request_success' => [
                    'label' => __('VAT validation request success'),
                    'formElement' => 'input',
                    'visible' => true,
                    'disabled' => true,
                    'source' => 'address',
                    'sortOrder' => 180
                ],
                'vat_request_id' => [
                    'label' => __('VAT validation request ID'),
                    'formElement' => 'input',
                    'visible' => true,
                    'disabled' => true,
                    'source' => 'address',
                    'sortOrder' => 190
                ],
                'vat_request_date' => [
                    'label' => __('VAT validation request date'),
                    'formElement' => 'input',
                    'dataType' => 'date',
                    'visible' => true,
                    'disabled' => true,
                    'source' => 'address',
                    'sortOrder' => 200
                ],
                'vat_trader_name' => [
                    'label' => __('Registered company name'),
                    'formElement' => 'input',
                    'visible' => true,
                    'disabled' => true,
                    'source' => 'address',
                    'sortOrder' => 210
                ],
                'vat_trader_address' => [
                    'label' => __('Registered company name'),
                    'formElement' => 'textarea',
                    'visible' => true,
                    'disabled' => true,
                    'source' => 'address',
                    'sortOrder' => 220
                ],
            ];

            foreach ($vatFields as $name => $fieldConfig) {
                $fieldInstance = $this->fieldFactory->create();
                $fieldInstance->setData(
                    [
                        'config' => $fieldConfig,
                        'name' => $name
                    ]
                );
                $fieldInstance->prepare();
                $this->addComponent($name, $fieldInstance);
            }
        }

        return parent::getChildComponents();
    }
}
