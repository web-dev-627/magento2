/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

define([
    'jquery',
    'Geissweb_Euvat/js/form/element/vat-number-co',
    'Geissweb_Euvat/js/queue',
    'uiRegistry',
    'mageUtils',
    'mage/translate',
    'Magento_Ui/js/modal/confirm',
    'Magento_Checkout/js/model/quote',
    'Magento_Checkout/js/model/shipping-rates-validator',
    'Aheadworks_OneStepCheckout/js/model/totals-service',
    'Aheadworks_OneStepCheckout/js/model/estimation-data-resolver',
    'Aheadworks_OneStepCheckout/js/action/get-sections-details',
    'Aheadworks_OneStepCheckout/js/action/set-shipping-information',
    'Aheadworks_OneStepCheckout/js/model/shipping-address/new-address-form-state'
], function (
    $,
    VatNumberCo,
    queue,
    registry,
    Utils,
    $t,
    confirm,
    Quote,
    MagentoShippingRatesValidator,
    AWTotalsService,
    AWEstimationDataResolver,
    AWGetSectionDetailsAction,
    AWSetShippingInfo,
    AWNewAddressFormState
) {
    'use strict';

    return VatNumberCo.extend({

        defaults: {
            debug: false
        },

        /**
         * @return {Abstract} Chainable
         */
        initialize: function () {
            var self = this;
            this.element = this._super();
            this.initObservable();
            this.setCssClasses();

            if (this.customScope === 'shippingAddress') {
                this.countrySelect = registry.get('checkout.shippingAddress.shipping-address-fieldset.included-country-field-row.country_id');
            } else {
                this.countrySelect = registry.get('checkout.paymentMethod.billingAddress.billing-address-fieldset.included-country-field-row.country_id');
            }

            // Set initial visibility
            if(typeof this.countrySelect === 'object') {
                self.setVisibility(self.getCountry());
            }

            // Toggle visibility on new address form country
            AWNewAddressFormState.isShown.subscribe(function (isShown) {
                if (isShown) {
                    self.setVisibility(self.getCountry());
                }
            }, this);

            return this;
        },

        /**
         * @return {Abstract} Chainable
         */
        initObservable: function () {
            this._super();
            MagentoShippingRatesValidator.bindHandler(this);
            return this;
        },

        afterValidation: function (jqXHR)
        {
            var self = this;
            if (this.debug) {
                console.log("aw afterValidation");
            }

            if (this.countryCode.length > 0) {
                queue.addFunction(function () {
                    self.updateCountry(self.countryCode, jqXHR);
                })
            }

            if (this.customScope === 'shippingAddress') {
                queue.addFunction(function() {
                    var estiResolverResult = AWEstimationDataResolver.resolveShippingAddress();
                    Quote.shippingAddress(estiResolverResult);
                    if(self.debug) {
                        console.log("AWEstimationDataResolver.resolveShippingAddress()", estiResolverResult)
                        console.log("AWEstimationDataResolver Quote is now", Quote);
                    }
                });

            } else if(this.customScope === 'billingAddress') {
                queue.addFunction(function() {
                    var estiResolverResult = AWEstimationDataResolver.resolveBillingAddress();
                    Quote.billingAddress(estiResolverResult);
                    if(self.debug) {
                        console.log("AWEstimationDataResolver.resolveBillingAddress()", estiResolverResult)
                        console.log("AWEstimationDataResolver Quote is now", Quote);
                    }
                });
            }

            queue.addFunction(function() {
                var AWSetShippingInfoResult = AWSetShippingInfo()
                    .success(function (response) {
                        Quote.setTotals(response.totals);
                    }).always(function () {
                        $('body').trigger('processStop');
                        AWTotalsService.isLoading(false);
                    });

                if(self.debug) {
                    console.log("AWSetShippingInfo()", AWSetShippingInfoResult);
                }
            });


            queue.addFunction(function() {
                var sectionDetailsResult = AWGetSectionDetailsAction(['totals', 'shippingMethods', 'shipping_methods']);
                if(self.debug) {
                    console.log("AWGetSectionDetailsAction([])", sectionDetailsResult);
                }
            });

            queue.addFunction(function () {
                $('body').trigger('processStop');
            });

            return queue.run();
        },

        /**
         * Get country value from select
         * @returns {string}
         */
        getCountry: function () {
            if (typeof(this.countrySelect) !== 'object' || Utils.isEmpty(this.countrySelect.value())) {
                return '';
            }
            if (this.debug) {
                console.log("aw getCountry: "+this.countrySelect.value(), this.countrySelect);
            }
            return this.countrySelect.value();
        },

        /**
         * Set country value for select
         * @param value
         * @returns {boolean}
         */
        setCountry: function (value) {
            if (typeof(this.countrySelect) !== 'object' || Utils.isEmpty(value)) {
                return false;
            }
            if (this.debug) {
                console.log("aw setCountry: "+value);
            }
            this.countrySelect.value(value);
            return true;
        },

        /**
         * @param {String} value
         * @param deferred
         */
        updateCountry: function (value, deferred) {
            var country = this.getCountry();
            if (this.debug) {
                console.log("aw updateCountry()");
                console.log("value:"+value);
                console.log("country:"+country);
            }

            if (!value
                || !this.askCustomerCountryCorrection
                || Utils.isEmpty(country)
                || $.inArray(value, this.euCountries) === -1
            ) {
                if (this.debug) {
                    console.log("updateCountry abort!", {
                        "value": value,
                        "country": country,
                        "askCustomerCountryCorrection": this.askCustomerCountryCorrection,
                        "isEmpty": Utils.isEmpty(country),
                        "inEuCountries": $.inArray(value, this.euCountries)
                    });
                }
                return deferred.promise();
            }

            if (value === 'EL') {
                value = 'GR';
            }

            if (value !== country) {
                var self = this;
                confirm({
                    title: $t('VAT number validation result'),
                    content: $t('The country prefix of your VAT Number does not match your address country. Shall we automatically set the country?'),
                    actions: {
                        confirm: function () {
                            self.setCountry(value);
                        },
                        cancel: function () {
                            self.countryCode = '';
                            self.value('');
                            self.clearMessages();
                        },
                        always: function () {
                            $('body').trigger('processStop');
                        }
                    }
                });
            }

        }

    });
});
