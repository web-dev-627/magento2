/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

define([
    'jquery',
    'Magento_Ui/js/form/element/abstract',
    'ko',
    'Magento_Ui/js/lib/validation/validator',
    'mageUtils',
    'mage/translate',
    'uiRegistry',
    'Magento_Ui/js/modal/confirm'
], function (
    $,
    Abstract,
    ko,
    validator,
    Utils,
    $t,
    registry,
    confirm
) {
    'use strict';

    return Abstract.extend({

        defaults: {
            label: $t('VAT Number'),
            template: 'Geissweb_Euvat/vatfield',
            elementTmpl: 'Geissweb_Euvat/vat-input',
            classes: null,
            containerClasses: null,
            countryCode: '',
            euCountries: false,
            fieldVisibleCountries: false,
            taxCalcMethod: 'shipping',
            isValidated: ko.observable(false),
            isValidVatNumber: ko.observable(false),
            validatedNumber: ko.observable(),
            success: ko.observable(false),
            response: ko.observable(),
            successForId: ko.observable(),
            required: ko.observable(),
            passedRegex: ko.observable(false),
            debug: false,
            isChanging: false,
            isOutOfUiScope: false,
            isImport: false,
            isAdminhtml: false,
            vatFrontendVisibility: false,
            placeholder: '',
            retry: false,
            retryText: $t('Click here to try again.'),
            delay: 3000,
            askCustomerCountryCorrection: false,
            timeout: null
        },

        /**
         * Init; Toggle visibility depending on config
         * @param options
         * @returns {exports}
         */
        initialize: function (options) {
            this._super();
            this.successId = 'success-'+this.uid;
            this.initObservable();

            if (this.vatFrontendVisibility === false) {
                this.visible(false);
            } else {
                this.setVisibility(this.getCountry());
            }
            if (this.debug) {
                console.log('vatNumberBase init '+this.uid, this);
            }
            return this;
        },

        /**
         * Initializes observable properties of instance
         *
         * @returns {Abstract} Chainable.
         */
        initObservable: function () {
            this._super();
            this.observe('isValidated isValidVatNumber success');
            return this;
        },

        /**
         * Sets initial visibility
         * @param countryValue
         */
        setVisibility: function (countryValue) {
            if (this.debug) {
                console.log("base got value from country select: "+countryValue);
            }
            if (this.vatFrontendVisibility === true
                && $.isArray(this.fieldVisibleCountries)
                && $.inArray(countryValue, this.fieldVisibleCountries) !== -1
            ) {
                this.visible(true);
            } else {
                this.value('');
                this.visible(false);
            }
        },

        /**
         * Save country prefix from VAT number
         * @param value
         */
        setVatNumberCountry: function (value) {
            if (this.debug) {
                console.log("setting VAT number country prefix: "+value);
            }
            this.countryCode = value;
        },

        /**
         * Get the VAT number prefix country or the one from country select
         * @returns {string}
         */
        getVatNumberCountry: function() {
            if (this.debug) {
                console.log("getVatNumberCountry", [this.countryCode, this.value()]);
            }
            if(!Utils.isEmpty(this.countryCode)) {
                return this.countryCode;
            } else if(!Utils.isEmpty(this.value())) {
                return this.value().substr(0,2).toUpperCase();
            } else if(!Utils.isEmpty(this.getCountry())) {
                return this.getCountry();
            }
        },

        /**
         * Unset all messages and results
         */
        clearMessages: function () {
            if(this.debug) {
                console.log("clearing messages.");
            }
            this.success(false);
            this.warn('');
            this.error('');
            this.bubble('success');
            this.bubble('warn');
            this.bubble('error');
            $('#'+this.uid+'-error').remove();
        },

        /**
         * Sets current validation status
         * @param number
         * @param isValidVatNumber
         */
        setStatus: function(number, isValidVatNumber) {
            this.isValidated(true);
            this.isValidVatNumber(isValidVatNumber);
            this.validatedNumber(number);
        },

        /**
         * resets current validation status
         */
        resetStatus: function() {
            if(this.debug) {
                console.log("Resetting status.");
            }
            this.isValidated(false);
            this.isValidVatNumber(false);
            this.validatedNumber('');
        },

        /**
         * Control validation execution
         * @param value
         */
        onUpdate: function (value) {
            if (this.debug) {
                console.log("base onUpdate", value);
            }

            if (this.timeout !== null) {
                if (this.debug) {
                    console.log("Clearing timeout "+this.timeout);
                }
                clearTimeout(this.timeout);
            }

            this.clearMessages();
            var deferred = $.Deferred();
            var self = this;

            if (!Utils.isEmpty(value)
                && value.length > 3
                && !this.isChanging
                && !this.isImport
            ) {
                this.timeout = setTimeout(function () {
                    self.startValidation(value);
                }, this.delay);

                if (this.debug) {
                    console.log("Added timeout with "+this.delay+"ms delay: "+this.timeout);
                }

            } else if (Utils.isEmpty(value) && !this.isChanging) {
                this.resetStatus();
                this.isChanging = true;
                this.value(''); // really need to set null - but causes bug in FF
                this.isChanging = false;
                this.beforeValidation(deferred);
                this.afterValidation(deferred);
            }
        },

        /**
         * @param value
         */
        startValidation: function(value) {
            value = value.replace(/[\W_]/g, "").toUpperCase().trim();
            this.isChanging = true;
            this.value(value);
            this.bubble('update', this.hasChanged());
            var result = this.validate(value);
            this.isChanging = false;
            this.isImport = false;
            return result;
        },

        /**
         * Check if number can be validated and validate it, show messages accordingly
         * @returns {*}
         */
        validate: function () {
            if (this.debug) {
                var debugPrefix = 'base validate '+this.uid;
                console.log(debugPrefix);
            }
            this.clearMessages();
            var value = this.value();
            var countryCode = this.getCountry();
            var isValid = false;
            var message;

            //syntax check first to lower request count to services
            if (this.isChanging && !Utils.isEmpty(value))
            {
                if (!Utils.isEmpty(countryCode)
                    && countryCode !== 'GB'
                    && $.isArray(this.euCountries)
                    && $.inArray(countryCode, this.euCountries) === -1
                ) {
                    isValid = true;
                    if(!this.isOutOfUiScope) {
                        this.source.set('params.invalid', false);
                    }
                    return {
                        valid: isValid,
                        target: this
                    };
                }

                //If the number starts with the country code, remember it, otherwise add it or show warning
                if (value.match(new RegExp('^[A-Z][A-Z]'))) {

                    if (this.debug) {
                        console.log(debugPrefix+", got countrycode");
                    }
                    countryCode = value.substr(0,2).toUpperCase();
                    this.setVatNumberCountry(countryCode);

                } else {

                    if (!Utils.isEmpty(countryCode)) {
                        if(countryCode === 'GR') {
                            value = 'EL'+value;
                        } else {
                            value = countryCode+value;
                        }
                        this.value(value);
                        if (this.debug) {
                            console.log(debugPrefix+", using new value: "+value);
                        }
                    } else {
                        if (this.debug) {
                            console.log(debugPrefix+", country prefix missing");
                        }
                        message = $t('Please provide the country code prefix of the VAT number.');
                        this.resetStatus();
                        if (!this.isOutOfUiScope) {
                            this.source.set('params.invalid', true);
                        }
                        if (this.isAdminhtml) {
                            this.error(message);
                            this.bubble('error');
                        } else {
                            this.warn(message);
                            this.bubble('warn');
                        }
                    }
                }
                // Regex check the number
                if (typeof(this.patterns[countryCode]) !== 'undefined') {
                    if (this.debug) {
                        console.log(debugPrefix+", pattern "+this.patterns[countryCode]);
                    }
                    var regex = new RegExp(this.patterns[countryCode]);

                    if (regex.test(value)) {
                        this.passedRegex(true);
                        if (!this.isAdminhtml) {
                            $('input[name='+this.inputName+']').blur();
                        }
                        var deferred = $.Deferred();
                        this.beforeValidation(deferred);
                        return this.validateVatNumber(value);

                    } else {
                        if (this.debug) {
                            console.log(debugPrefix+", format invalid");
                        }
                        this.passedRegex(false);
                        isValid = false;
                        message = $t('The format of the VAT number is invalid for this country.');
                        this.resetStatus();
                        if (!this.isOutOfUiScope) {
                            this.source.set('params.invalid', true);
                        }
                        this.warn(message);
                        this.bubble('warn');
                    }

                } else {
                    if (this.debug) {
                        console.log(debugPrefix+", no EU number");
                    }
                    isValid = false;
                    this.passedRegex(false);
                    this.error($t('This does not seem to be a EU VAT Number.'));
                    this.bubble('error');
                    if (!this.isOutOfUiScope) {
                        this.source.set('params.invalid', true);
                    }
                }

            }
            //regular validation
            if (this.debug) {
                console.log(debugPrefix+", regular validation value: "+value, this.validation);
            }
            var result = validator(this.validation, value, this);
            message = result.message;
            isValid = result.passed;
            this.error(message);
            this.bubble('error');
            if (this.debug) {
                console.log(debugPrefix+", "+this.parentScope+", regular validation result "+this.isOutOfUiScope, result);
            }
            if (!isValid && !this.isOutOfUiScope) {
                this.source.set('params.invalid', true);
            }
            return {
                valid: isValid,
                target: this
            };
        },

        /**
         * AJAX validation of the VAT number
         * @param vatNumber
         */
        validateVatNumber: function (vatNumber) {
            if (this.debug) {
                console.log("base validateVatNumber", vatNumber);
            }
            $('body').trigger('processStart');

            var self = this;
            var valid = false;
            var formKey;
            self.resetStatus();

            if (typeof(window.FORM_KEY) !== 'undefined' && window.FORM_KEY.length > 0) {
                formKey = window.FORM_KEY;
            } else if (!this.isAdminhtml && (typeof($.cookie) === 'function' && $.cookie('form_key').length > 0)) {
                formKey = $.cookie('form_key');
            }

            return $.ajax({
                type: 'POST',
                url: self.validationUrl,
                data: {
                    vat_number: vatNumber,
                    form_key: formKey,
                    handle: self.handle
                },

                success: function (response) {
                    self.clearMessages();
                    self.response(response);

                    // Workaround for GB which numbers can not be validated through VIES
                    if(response.is_gb === true) {
                        self.setStatus(vatNumber, true);
                        self.warn($t(response.request_message));

                    } else {
                        if (response.vat_is_valid === true) {
                            valid = true;
                            self.setStatus(vatNumber, true);
                            self.success($t(response.request_message));
                            self.successForId(self.successId);
                        } else {
                            valid = false;
                            self.setStatus(vatNumber, false);
                            if (response.warning === true) {
                                self.retry = true;
                                self.warn($t(response.request_message));
                            } else {
                                self.error($t(response.request_message));
                            }
                        }
                    }


                },

                error: function (response) {
                    valid = false;
                    self.resetStatus();
                    self.response(response);
                    self.retry = true;
                    self.warn($t('Error during VAT number validation request.'));
                },

                always: function () {
                    $('body').trigger('processStop');
                }

            }).then(function (data, textStatus, jqXHR) {
                self.afterValidation(jqXHR);
            }).done(function () {
                $('body').trigger('processStop');
                return {
                    valid: valid,
                    target: self
                };
            });
        },

        /**
         * Is implemented in specific instances of this
         */
        beforeValidation: function () {
        },
        /**
         * Is implemented in specific instances of this
         */
        afterValidation: function (jqXHR) {
        },

        /**
         * Try to check false country selections
         * @param {String} value
         * @param deferred
         */
        updateCountry: function (value, deferred) {
            if (this.debug) {
                console.log("base updateCountry("+value+")");
                console.log("base fetching "+this.parentName + '.' + 'country_id');
            }
            deferred = deferred || $.Deferred();
            var country = registry.get(this.parentName + '.' + 'country_id');

            if (!value
                || !this.askCustomerCountryCorrection
                || this.parentScope !== 'shippingAddress'
                || typeof(country) !== 'object'
                || Utils.isEmpty(country.value())
                || $.inArray(country.value(), this.euCountries) === -1
                || $.inArray(value, this.euCountries) === -1
            ) {
                deferred.resolve();
                return deferred.promise();
            }

            if (value === 'EL') {
                value = 'GR';
            }

            if (value !== country.value()) {
                var self = this;
                confirm({
                    title: $t('VAT number validation result'),
                    content: $t('The country prefix of your VAT Number does not match your address country. Shall we automatically set the country?'),
                    actions: {
                        confirm: function () {
                            country.value(value);
                        },
                        cancel: function () {
                            self.countryCode = '';
                            self.value('');
                            self.clearMessages();
                        },
                        always: function () {
                            deferred.resolve();
                        }
                    }
                });
            } else {
                deferred.resolve();
            }

            return deferred.promise();
        },

        /**
         * Get the company field value in UiComponent forms
         * @returns {string|*}
         */
        getCompany: function () {
            if (this.debug) {
                console.log("base getCompany()");
            }
            var company = registry.get(this.parentName + '.' + 'company');

            if (typeof(company) !== 'object' || Utils.isEmpty(company.value())) {
                console.log("base getCompany() not able to find company field.");
                return '';
            }
            if (this.debug) {
                console.log("base getCompany() result: "+company.value());
            }
            return company.value();
        },

        /**
         * Get the country field value in UiComponent forms
         * @returns {boolean|*}
         */
        getCountry: function () {
            var country = registry.get(this.parentName + '.' + 'country_id');
            if (typeof(country) !== 'object' || Utils.isEmpty(country.value())) {
                return false;
            }
            if (this.debug) {
                console.log("base getCountry: "+country.value()+" from "+this.parentName+ '.' + 'country_id');
            }
            return country.value();
        },

        /**
         * Get the region field value in UiComponent forms
         * @returns {boolean|*}
         */
        getRegion: function () {
            var region = registry.get(this.parentName + '.' + 'region_id');
            if (typeof(region) !== 'object' || Utils.isEmpty(region.value())) {
                return false;
            }
            if (this.debug) {
                console.log("base getRegion(): "+region.value());
            }
            return region.value();
        },

        /**
         * Not yet implemented. Can lock the field after a valid number was entered
         * @param message
         */
        lockValidation: function (message) {
            this.disable();
            $('span#vatid-tooltip').removeClass('field-tooltip-action').addClass('vatvalidation-success');
            $('span#vatid-reset').show();
            this.tooltip.description($t(message));
        },

        /**
         * Retry the validation
         */
        retryValidation: function () {
            return this.onUpdate(this.value());
        },

        /**
         * Regexes for each country
         */
        patterns: {
            'AT' : '(AT)U[0-9]{8}$',
            'BE' : '(BE)0[0-9]{9}$',
            'BG' : '(BG)[0-9]{9,10}$',
            'CY' : '(CY)[0-9]{8}[A-Z]$',
            'CZ' : '(CZ)[0-9]{8,10}$',
            'DE' : '(DE)[0-9]{9}$',
            'DK' : '(DK)[0-9]{8}$',
            'EE' : '(EE)[0-9]{9}$',
            'GR' : '(EL|GR)[0-9]{9}$',
            'EL' : '(EL|GR)[0-9]{9}$',
            'ES' : '(ES)[0-9A-Z][0-9]{7}[0-9A-Z]$',
            'FI' : '(FI)[0-9]{8}$',
            'FR' : '(FR)[0-9A-Z]{2}[0-9]{9}$',
            'GB' : '(GB)([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3}$)',
            'XI' : '(XI)[0-9]{3}[0-9]{4}[0-9]{2}',
            'HR' : '(HR)[0-9]{11}$',
            'HU' : '(HU)[0-9]{8}$',
            'IE' : '(IE)(([0-9]{7}WI|[0-9][0-9A-Z\*\+][0-9]{5}[A-Z]{1,2}$))',
            'IT' : '(IT)[0-9]{11}$',
            'LT' : '(LT)([0-9]{9}|[0-9]{12}$)',
            'LU' : '(LU)[0-9]{8}$',
            'LV' : '(LV)[0-9]{11}$',
            'MT' : '(MT)[0-9]{8}$',
            'NL' : '(NL)[0-9]{9}B([0-9]{2}|O[0-9]{1}$)',
            'PL' : '(PL)[0-9]{10}$',
            'PT' : '(PT)[0-9]{9}$',
            'RO' : '(RO)[0-9]{2,10}$',
            'SE' : '(SE)[0-9]{12}$',
            'SI' : '(SI)[0-9]{8}$',
            'SK' : '(SK)[0-9]{10}$'
        }

    });
});

