<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Model\Setup;

use Geissweb\Euvat\Helper\Setup;
use Geissweb\Euvat\Logger\Logger;
use Magento\Catalog\Model\ResourceModel\Product\CollectionFactory;
use Magento\Config\Model\ResourceModel\Config;
use Magento\Customer\Model\ResourceModel\Group\CollectionFactory as CustGroupCollFactory;
use Magento\Framework\App\ResourceConnection;
use Magento\Framework\Message\Manager;
use Magento\Tax\Model\Calculation\Rate;
use Magento\Tax\Model\Calculation\RuleFactory;
use Magento\Tax\Model\TaxRuleRepository;

class Tax
{
    const TC_PRODUCTS_STANDARD = 1;
    const TC_PRODUCTS_REDUCED = 2;
    const TC_PRODUCTS_SHIPPING_STANDART = 3;
    const TC_PRODUCTS_SHIPPING_REDUCED = 4;
    const TC_PRODUCTS_DIGITAL = 5;

    const TC_CUSTOMER_CONSUMER = 7;
    const TC_CUSTOMER_BUSINESS_DOMESTIC = 8;
    const TC_CUSTOMER_BUSINESS_EU = 9;

    /**
     * @var CollectionFactory
     */
    public $productCollectionFactory;

    /**
     * @var CustGroupCollFactory
     */
    public $customerGroupCollectionFactory;

    /**
     * Holds the installed rate IDs
     * @var array
     */
    public $standardRateIds = [];

    /**
     * Holds the installed rate IDs
     * @var array
     */
    public $reducedRateIds = [];

    /**
     * Holds the installed rate IDs
     * @var array
     */
    public $digitalRateIds = [];

    /**
     * Holds the installed rate IDs
     * @var array
     */
    public $exemptRateIds;

    /**
     * Used to save store config
     * @var Config
     */
    protected $configResourceModel;

    /**
     * Helper to get rates and values
     * @var Setup
     */
    protected $setupHelper;

    /**
     * @var RuleFactory
     */
    protected $taxRuleFactory;

    /**
     * @var Rate
     */
    protected $taxRateModel;

    /**
     * @var CollectionFactory
     */
    protected $catalogResourceModelProductCollectionFactory;

    /**
     * @var CustGroupCollFactory
     */
    protected $customerResourceModelGroupCollectionFactory;

    /**
     * Insert into DB directly
     * @var ResourceConnection
     */
    private $resource;

    /**
     * Insert into DB directly
     * @var \Magento\Framework\DB\Adapter\AdapterInterface
     */
    private $connection;

    /**
     * To save tax rules
     * @var TaxRuleRepository
     */
    private $taxRuleRepository;

    /**
     * @var Logger
     */
    private $logger;

    /**
     * @var Manager
     */
    private $messageManager;

    /**
     * Tax constructor.
     *
     * @param Setup                $euvatSetupHelper
     * @param Logger               $logger
     * @param RuleFactory          $taxCalculationRuleFactory
     * @param TaxRuleRepository    $taxRuleRepository
     * @param Rate                 $taxCalculationRate
     * @param ResourceConnection   $resource
     * @param Manager              $messageManager
     * @param Config               $configResourceModel
     * @param CollectionFactory    $productCollectionFactory
     * @param CustGroupCollFactory $customerGroupCollectionFactory
     */
    public function __construct(
        Setup $euvatSetupHelper,
        Logger $logger,
        RuleFactory $taxCalculationRuleFactory,
        TaxRuleRepository $taxRuleRepository,
        Rate $taxCalculationRate,
        ResourceConnection $resource,
        Manager $messageManager,
        Config $configResourceModel,
        CollectionFactory $productCollectionFactory,
        CustGroupCollFactory $customerGroupCollectionFactory
    ) {
        $this->configResourceModel = $configResourceModel;
        $this->setupHelper = $euvatSetupHelper;
        $this->logger = $logger;

        $this->taxRuleFactory    = $taxCalculationRuleFactory;
        $this->taxRuleRepository = $taxRuleRepository;
        $this->taxRateModel      = $taxCalculationRate;

        $this->productCollectionFactory = $productCollectionFactory;
        $this->customerGroupCollectionFactory = $customerGroupCollectionFactory;

        $this->resource = $resource;
        $this->connection = $resource->getConnection('write');
        $this->messageManager = $messageManager;
    }

    /**
     * Clear config cache
     */
    public function clearConfigCache()
    {
        $this->setupHelper->clearConfigCache();
    }

    /**
     * Execute setup
     * @param array $post
     *
     * @return bool
     */
    public function runSetup($post)
    {
        try {
            $this->logger->debug('PostData:');
            $this->logger->debug(var_export($post, true));

            if (isset($post['apply_store_config']) && $post['apply_store_config'] == 1) {
                $this->logger->debug('Apply store config.');
                $this->applyStoreConfig(
                    $post['country'],
                    $post['license_key'],
                    $post['vat_number'],
                    $post['installation_type'],
                    $post['create_tax_rules']
                );
            }

            if (isset($post['create_tax_rules']) && $post['create_tax_rules'] == 1) {
                $this->logger->debug('Create Tax Rules.');
                $this->truncateTable('tax_class');
                $this->truncateTable('tax_calculation_rule');
                $this->truncateTable('tax_calculation_rate');
                $this->truncateTable('tax_calculation_rate_title');
                $this->truncateTable('tax_calculation');

                //Add tax classes
                $this->logger->debug('Creating Tax Classes.');
                $this->addTaxClasses($this->setupHelper->getTaxClassesInsertArray());

                //Add tax rates
                $this->logger->debug('Creating Tax Rates:');
                $rates = $this->setupHelper->getTaxRatesInsertArray(
                    $post['country'],
                    (bool)$post['use_digital_rule'],
                    (bool)$post['use_reduced_rule'],
                    $post['reduced_rate'],
                    (bool)$post['use_non_eu_rule'],
                    (bool)$post['add_gb'],
                    (bool)$post['add_gbni']
                );
                $this->logger->debug(var_export($rates, true));
                $this->addTaxRates($rates);

                //Add tax rules
                $this->logger->debug('Creating Tax Rules.');
                $this->addTaxRules((bool)$post['use_reduced_rule']);

                //Update existing products and customer groups
                $map = [];
                foreach ($post as $key => $value) {
                    if (strpos($key, 'p_') === 0) {
                        $temp = explode('_', $key);
                        $map['product'][$temp[1]] = (int)$value;
                    } elseif (strpos($key, 'c_') === 0) {
                        $temp = explode('_', $key);
                        $map['customer'][$temp[1]] = (int)$value;
                    }
                }
                if (isset($map['product']) && is_array($map['product'])) {
                    $this->logger->debug('Updating Product Tax Classes');
                    $this->logger->debug(var_export($map['product'], true));
                    $this->updateProductTaxClasses($map['product']);
                }
                if (isset($map['customer']) && is_array($map['customer'])) {
                    $this->logger->debug('Updating Customer Tax Classes');
                    $this->logger->debug(var_export($map['customer'], true));
                    $this->updateCustomerGroupTaxClasses($map['customer']);
                }
            }

            $this->logger->debug('All Done!');
            $this->setIsInstalled();
            return true;
        } catch (\Exception $e) {
            $this->messageManager->addError(__('Error during the Setup: ' . $e->getMessage()));
            $this->logger->critical($e);
        }
    }

    /**
     * Creates new tax classes
     * @param array $classes
     */
    private function addTaxClasses(array $classes)
    {
        foreach ($classes as $keyId => $class) {
            $this->insertIntoTable('tax_class', $class);
        }
    }

    /**
     * Creates new tax rates
     * @param array $rates
     */
    private function addTaxRates(array $rates)
    {
        $tableTaxCalcRate = $this->getTable('tax_calculation_rate');
        foreach ($rates as $rate) {
            //Insert rate
            $this->connection->insert($tableTaxCalcRate, $rate);
            //Sort rates for use in rules
            if (stristr(__($rate['code'])->getText(), __(' standard VAT')->getText())
                || stristr(__($rate['code'])->getText(), __(' supply VAT')->getText())
            ) {
                $this->standardRateIds[] = $this->getLastInsertId($tableTaxCalcRate);
            } elseif (stristr(__($rate['code'])->getText(), __(' reduced VAT')->getText())) {
                $this->reducedRateIds[] = $this->getLastInsertId($tableTaxCalcRate);
            } elseif (stristr(__($rate['code'])->getText(), __(' digital VAT')->getText())) {
                $this->digitalRateIds[] = $this->getLastInsertId($tableTaxCalcRate);
            } elseif (stristr(__($rate['code'])->getText(), __(' VAT exempt')->getText())) {
                $this->exemptRateIds[] = $this->getLastInsertId($tableTaxCalcRate);
            }
        }
    }

    /**
     * Creates new tax rules
     * @param bool $withReduced
     * @return bool
     */
    private function addTaxRules($withReduced = true)
    {
        try {
            /**@var $rule \Magento\Tax\Api\Data\TaxRuleInterface */
            $rule = $this->taxRuleFactory->create();
            $rule->setCode(__("Consumers buy products with standard VAT"));
            $rule->setCustomerTaxClassIds([self::TC_CUSTOMER_CONSUMER, self::TC_CUSTOMER_BUSINESS_DOMESTIC]);
            $rule->setProductTaxClassIds([self::TC_PRODUCTS_STANDARD, self::TC_PRODUCTS_SHIPPING_STANDART]);
            $rule->setTaxRateIds($this->standardRateIds);
            $rule->setPosition(0);
            $rule->setPriority(0);
            $this->taxRuleRepository->save($rule);

            if ($withReduced) {
                $rule = $this->taxRuleFactory->create();
                $rule->setCode(__("Consumers buy products with reduced VAT"));
                $rule->setCustomerTaxClassIds([self::TC_CUSTOMER_CONSUMER, self::TC_CUSTOMER_BUSINESS_DOMESTIC]);
                $rule->setProductTaxClassIds([self::TC_PRODUCTS_REDUCED, self::TC_PRODUCTS_SHIPPING_REDUCED]);
                $rule->setTaxRateIds($this->reducedRateIds);
                $rule->setPosition(0);
                $rule->setPriority(0);
                $this->taxRuleRepository->save($rule);
            }

            if (count($this->digitalRateIds) > 0) {
                $rule = $this->taxRuleFactory->create();
                $rule->setCode(__("Consumers buy digital products and services"));
                $rule->setCustomerTaxClassIds([self::TC_CUSTOMER_CONSUMER]);
                $rule->setProductTaxClassIds([self::TC_PRODUCTS_DIGITAL]);
                $rule->setTaxRateIds($this->digitalRateIds);
                $rule->setPosition(0);
                $rule->setPriority(0);
                $this->taxRuleRepository->save($rule);

                $rule = $this->taxRuleFactory->create();
                $rule->setCode(__("Domestic businesses buy digital products and services"));
                $rule->setCustomerTaxClassIds([self::TC_CUSTOMER_BUSINESS_DOMESTIC]);
                $rule->setProductTaxClassIds([self::TC_PRODUCTS_DIGITAL]);
                $rule->setTaxRateIds($this->standardRateIds);
                $rule->setPosition(0);
                $rule->setPriority(0);
                $this->taxRuleRepository->save($rule);
            }

            $rule = $this->taxRuleFactory->create();
            $rule->setCode(__("EU Businesses buy VAT exempt"));
            $rule->setCustomerTaxClassIds([self::TC_CUSTOMER_BUSINESS_EU]);
            $rule->setProductTaxClassIds([
                self::TC_PRODUCTS_STANDARD,
                self::TC_PRODUCTS_REDUCED,
                self::TC_PRODUCTS_SHIPPING_STANDART,
                self::TC_PRODUCTS_SHIPPING_REDUCED,
                self::TC_PRODUCTS_DIGITAL
            ]);
            $rule->setTaxRateIds($this->exemptRateIds);
            $rule->setPosition(0);
            $rule->setPriority(0);
            $this->taxRuleRepository->save($rule);
        } catch (\Exception $e) {
            $this->logger->critical($e);
        }

        return true;
    }

    /**
     * Updates existing product tax classes
     *
     * @param array $map
     * @return void
     */
    private function updateProductTaxClasses(array $map)
    {
        $this->logger->debug("Using Map: " . var_export($map, true));
        $this->configResourceModel->saveConfig(
            'tax/classes/default_product_tax_class',
            self::TC_PRODUCTS_STANDARD,
            'default',
            0
        );

        /** @var \Magento\Catalog\Model\ResourceModel\Product\Collection $productCollection */
        $productCollection = $this->productCollectionFactory->create();
        $productCollection->addAttributeToSelect('tax_class_id');
        $productCollection->load();
        $this->logger->debug('Selected '.count($productCollection->getItems()).' products');

        /** @var \Magento\Catalog\Api\Data\ProductInterface|\Magento\Catalog\Model\Product $product */
        foreach ($productCollection->getItems() as $product) {
            $classId = (int)$product->getData('tax_class_id');
            $hasMapping = array_key_exists($classId, $map);
            $classIdNeedsChange = $classId != $map[$classId];
            if ($hasMapping && $classIdNeedsChange) {
                $this->logger->debug("Updating " . $product->getSku());
                $product->addAttributeUpdate('tax_class_id', $map[$classId], 0);
            } else {
                $this->logger->debug(sprintf(
                    'Not mappable classId: %s @ %s | hasMapping: %s | needsChange: %s',
                    $classId,
                    $product->getSku(),
                    $hasMapping,
                    $classIdNeedsChange
                ));
            }
        }
    }

    /**
     * Updates existing customer group tax classes
     *
     * @param array $map
     * @return void
     */
    private function updateCustomerGroupTaxClasses(array $map)
    {
        $this->configResourceModel->saveConfig(
            'tax/classes/default_customer_tax_class',
            self::TC_CUSTOMER_CONSUMER,
            'default',
            0
        );

        $customerGroupGollection = $this->customerGroupCollectionFactory->create();
        foreach ($customerGroupGollection as $customerGroup) {
            if (array_key_exists($customerGroup->getTaxClassId(), $map)) {
                $customerGroup->setTaxClassId($map[$customerGroup->getTaxClassId()]);
                $customerGroup->save();
            }
        }
    }

    /**
     * Sets the store config for EU VAT calculation
     *
     * @param string  $baseCc
     * @param string  $key
     * @param string  $vatId
     * @param string  $installType
     * @param boolean $withRules
     *
     * @return void
     */
    private function applyStoreConfig($baseCc, $key, $vatId, $installType, $withRules)
    {
        try {
            $config = $this->setupHelper->getStoreConfigValues($baseCc, $key, $vatId, $installType, $withRules);
            foreach ($config as $path => $value) {
                if ($this->setupHelper->functionsHelper->configHelper->isDebugEnabled()) {
                    $this->logger->debug("saveConfig: $path :: $value (default scope 0)");
                }
                $this->configResourceModel->saveConfig($path, $value, 'default', 0);
            }
        } catch (\Exception $e) {
            $this->logger->critical($e);
        }
    }

    /**
     * Sets installed config flag
     * @return void
     */
    public function setIsInstalled()
    {
        $this->configResourceModel->saveConfig('euvat/extension_info/is_installed', true, 'default', 0);
    }

    /**
     * Get Table name
     * @param string $tableAlias
     * @return string
     */
    private function getTable($tableAlias)
    {
        return $this->resource->getTableName($tableAlias);
    }

    /**
     * Empty table
     * @param string $table
     * @return void
     */
    private function truncateTable($table)
    {
        $tableName = $this->getTable($table);
        $this->connection->delete($tableName);
    }

    /**
     * Insert into table
     * @param string $table
     * @param array $data
     * @return void
     */
    private function insertIntoTable($table, $data)
    {
        $tableName = $this->getTable($table);
        $this->connection->insert($tableName, $data);
    }

    /**
     * Get the last inserted ID
     * @param string $table
     * @return int
     */
    private function getLastInsertId($table)
    {
        $tableName = $this->getTable($table);
        return $this->connection->lastInsertId($tableName);
    }
}
