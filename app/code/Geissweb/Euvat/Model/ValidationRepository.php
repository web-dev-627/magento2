<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Model;

use Geissweb\Euvat\Api\Data\ValidationInterfaceFactory;
use Geissweb\Euvat\Api\Data\ValidationSearchResultsInterfaceFactory;
use Geissweb\Euvat\Api\ValidationRepositoryInterface;
use Geissweb\Euvat\Model\ResourceModel\Validation as ResourceValidation;
use Geissweb\Euvat\Model\ResourceModel\Validation\CollectionFactory as ValidationCollectionFactory;
use Geissweb\Euvat\Model\ResourceModel\Validation\Collection;

use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\Reflection\DataObjectProcessor;
use Magento\Framework\Api\SearchCriteriaInterface;
use Magento\Framework\Api\SortOrder;
use Magento\Store\Model\StoreManagerInterface;

use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\NoSuchEntityException;

/**
 * Class ValidationRepository
 */
class ValidationRepository implements ValidationRepositoryInterface
{
    /**
     * @var DataObjectHelper
     */
    protected $dataObjectHelper;

    /**
     * @var ValidationSearchResultsInterfaceFactory
     */
    protected $searchResultsFactory;

    /**
     * @var ValidationFactory
     */
    protected $validationFactory;

    /**
     * @var ValidationCollectionFactory
     */
    protected $validationCollectionFactory;

    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @var ResourceValidation
     */
    protected $resource;

    /**
     * @var DataObjectProcessor
     */
    protected $dataObjectProcessor;

    /**
     * @var ValidationInterfaceFactory
     */
    protected $dataValidationFactory;

    /**
     * @param ResourceValidation                      $resource
     * @param ValidationFactory                       $validationFactory
     * @param ValidationInterfaceFactory              $dataValidationFactory
     * @param ValidationCollectionFactory             $validationCollectionFactory
     * @param ValidationSearchResultsInterfaceFactory $searchResultsFactory
     * @param DataObjectHelper                        $dataObjectHelper
     * @param DataObjectProcessor                     $dataObjectProcessor
     * @param StoreManagerInterface                   $storeManager
     */
    public function __construct(
        ResourceValidation $resource,
        ValidationFactory $validationFactory,
        ValidationInterfaceFactory $dataValidationFactory,
        ValidationCollectionFactory $validationCollectionFactory,
        ValidationSearchResultsInterfaceFactory $searchResultsFactory,
        DataObjectHelper $dataObjectHelper,
        DataObjectProcessor $dataObjectProcessor,
        StoreManagerInterface $storeManager
    ) {
        $this->resource = $resource;
        $this->validationFactory = $validationFactory;
        $this->validationCollectionFactory = $validationCollectionFactory;
        $this->searchResultsFactory = $searchResultsFactory;
        $this->dataObjectHelper = $dataObjectHelper;
        $this->dataValidationFactory = $dataValidationFactory;
        $this->dataObjectProcessor = $dataObjectProcessor;
        $this->storeManager = $storeManager;
    }

    /**
     * {@inheritdoc}
     */
    public function save(
        \Geissweb\Euvat\Api\Data\ValidationInterface $validation
    ) {
        try {
            $this->resource->save($validation);
        } catch (\Exception $exception) {
            throw new CouldNotSaveException(__(
                'Could not save the validation: %1',
                $exception->getMessage()
            ));
        }
        return $validation;
    }

    /**
     * {@inheritdoc}
     */
    public function getById($validationId)
    {
        /** @var \Geissweb\Euvat\Api\Data\ValidationInterface $validation */
        $validation = $this->validationFactory->create();
        $validation->load($validationId);
        if (!$validation->getId()) {
            throw new NoSuchEntityException(__('Validation with id "%1" does not exist.', $validationId));
        }
        return $validation;
    }

    /**
     * @param $vatId
     *
     * @return bool|\Magento\Framework\Model\AbstractModel
     */
    public function getByVatId($vatId)
    {
        /** @var \Geissweb\Euvat\Model\ResourceModel\Validation\Collection $collection */
        $collection = $this->validationCollectionFactory->create();
        $collection->addFieldToFilter('vat_id', $vatId);
        return $collection->load()->fetchItem();
    }

    /**
     * Builds the search result
     * @param SearchCriteriaInterface $searchCriteria
     * @param Collection              $collection
     *
     * @return \Geissweb\Euvat\Api\Data\ValidationSearchResultsInterface
     */
    private function buildSearchResult(SearchCriteriaInterface $searchCriteria, Collection $collection)
    {
        $searchResults = $this->searchResultsFactory->create();

        $searchResults->setSearchCriteria($searchCriteria);
        $searchResults->setItems($collection->getItems());
        $searchResults->setTotalCount($collection->getSize());

        return $searchResults;
    }

    /**
     * Get list of validations
     * @param SearchCriteriaInterface $searchCriteria
     *
     * @return \Geissweb\Euvat\Api\Data\ValidationSearchResultsInterface
     */
    public function getList(SearchCriteriaInterface $searchCriteria)
    {
        $collection = $this->validationCollectionFactory->create();

        $this->addFiltersToCollection($searchCriteria, $collection);
        $this->addSortOrdersToCollection($searchCriteria, $collection);
        $this->addPagingToCollection($searchCriteria, $collection);

        $collection->load();

        return $this->buildSearchResult($searchCriteria, $collection);
    }

    /**
     * Adds filters to collection
     * @param SearchCriteriaInterface $searchCriteria
     * @param Collection              $collection
     * @return void
     */
    private function addFiltersToCollection(SearchCriteriaInterface $searchCriteria, Collection $collection)
    {
        foreach ($searchCriteria->getFilterGroups() as $filterGroup) {
            $fields = $conditions = [];
            foreach ($filterGroup->getFilters() as $filter) {
                $fields[] = $filter->getField();
                $conditions[] = [$filter->getConditionType() => $filter->getValue()];
            }
            $collection->addFieldToFilter($fields, $conditions);
        }
    }

    /**
     * Add sort orders to collection
     * @param SearchCriteriaInterface $searchCriteria
     * @param Collection              $collection
     * @return void
     */
    private function addSortOrdersToCollection(SearchCriteriaInterface $searchCriteria, Collection $collection)
    {
        foreach ((array) $searchCriteria->getSortOrders() as $sortOrder) {
            $direction = $sortOrder->getDirection() == SortOrder::SORT_ASC ? 'asc' : 'desc';
            $collection->addOrder($sortOrder->getField(), $direction);
        }
    }

    /**
     * Add paging to collection
     * @param SearchCriteriaInterface $searchCriteria
     * @param Collection              $collection
     * @return void
     */
    private function addPagingToCollection(SearchCriteriaInterface $searchCriteria, Collection $collection)
    {
        $collection->setPageSize($searchCriteria->getPageSize());
        $collection->setCurPage($searchCriteria->getCurrentPage());
    }

    /**
     * {@inheritdoc}
     */
    public function delete(
        \Geissweb\Euvat\Api\Data\ValidationInterface $validation
    ) {
        try {
            $this->resource->delete($validation);
        } catch (\Exception $exception) {
            throw new CouldNotDeleteException(__(
                'Could not delete the Validation: %1',
                $exception->getMessage()
            ));
        }
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function deleteById($validationId)
    {
        return $this->delete($this->getById($validationId));
    }
}
