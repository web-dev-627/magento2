<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Model\Rewrite;

use Geissweb\Euvat\Logger\Logger;

/**
 * Class TaxCalculation
 */
class TaxCalculation extends \Magento\Tax\Model\Calculation
{
    /**
     * Get request object for getting tax rate based on store shipping original address
     * MOD: Allows subtraction of the specific country rate when using CBT with a threshold country
     *
     * @param   null|string|bool|int|Store $store
     * @return  \Magento\Framework\DataObject
     */
    protected function getRateOriginRequest($store = null)
    {
        // UNTOUCHED
        $request = new \Magento\Framework\DataObject();
        $request->setCountryId(
            $this->_scopeConfig->getValue(
                \Magento\Shipping\Model\Config::XML_PATH_ORIGIN_COUNTRY_ID,
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
                $store
            )
        )->setRegionId(
            $this->_scopeConfig->getValue(
                \Magento\Shipping\Model\Config::XML_PATH_ORIGIN_REGION_ID,
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
                $store
            )
        )->setPostcode(
            $this->_scopeConfig->getValue(
                \Magento\Shipping\Model\Config::XML_PATH_ORIGIN_POSTCODE,
                \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
                $store
            )
        )->setCustomerClassId(
            $this->getDefaultCustomerTaxClass($store)
        )->setStore(
            $store
        );
        // UNTOUCHED

        $logger = $this->getData('euvat_logger');
        $currentTaxCountryRegistry = $this->getData('euvat_current_tax_country_registry');
        $config = $this->getData('euvat_config');

        if ($logger instanceof Logger
            && $currentTaxCountryRegistry instanceof \Geissweb\Euvat\Registry\CurrentTaxCountry
            && $config instanceof \Geissweb\Euvat\Helper\Configuration
        ) {
            $logger->debug(
                "[Rewrite\TaxCalculation] getRateOriginRequest country is " . $request->getCountryId()
            );
            $logger->debug(
                "[Rewrite\TaxCalculation] currentTaxCountryRegistry country is " . $currentTaxCountryRegistry->get()
            );
        } else {
            return $request;
        }

        // Calculate tax amount based on threshold country if needed
        if ($currentTaxCountryRegistry->get() !== null
            && $config->getEnableThresholdCountries()
            && $config->isThresholdCountry($currentTaxCountryRegistry->get())
            && $config->isCbtEnabled()
            && ($config->getDisableCbtForEuBusiness() || $config->getDisableCbtForOutOfEurope())
        ) {
            $logger->debug(
                "[Rewrite\TaxCalculation] getRateOriginRequest CBT enabled and threshold country: " . $currentTaxCountryRegistry->get()
            );
            $request->setCountryId($currentTaxCountryRegistry->get());
        }

        return $request;
    }
}
