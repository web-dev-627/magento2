<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin;

use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Helper\Functions;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\ValidationFactory;
use Geissweb\Euvat\Model\ValidationRepository;
use Magento\Customer\Api\AddressRepositoryInterface;
use Magento\Customer\Api\Data\CustomerInterface;
use Magento\Customer\Model\Session;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Registry;

/**
 * Assigns customer group
 * Class CustomerRepository
 */
class CustomerRepository
{
    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * @var Functions
     */
    public $functionsHelper;

    /**
     * @var ValidationRepository
     */
    public $validationRepository;

    /**
     * @var AddressRepositoryInterface
     */
    public $addressRepository;

    /**
     * @var Logger
     */
    public $logger;

    /**
     * @var ValidationFactory
     */
    public $validationFactory;

    /**
     * @var Registry
     */
    private $registry;
    /**
     * @var Session
     */
    private $customerSession;

    /**
     * Constructor
     *
     * @param Configuration              $configHelper
     * @param Functions                  $functionsHelper
     * @param ValidationRepository       $validationRepository
     * @param ValidationFactory          $validationFactory
     * @param AddressRepositoryInterface $addressRepository
     * @param Registry                   $registry
     * @param Session                    $customerSession
     * @param Logger                     $logger
     */
    public function __construct(
        Configuration $configHelper,
        Functions $functionsHelper,
        ValidationRepository $validationRepository,
        ValidationFactory $validationFactory,
        AddressRepositoryInterface $addressRepository,
        Registry $registry,
        Session $customerSession,
        Logger $logger
    ) {
        $this->configHelper = $configHelper;
        $this->functionsHelper = $functionsHelper;
        $this->validationRepository = $validationRepository;
        $this->validationFactory = $validationFactory;
        $this->addressRepository = $addressRepository;
        $this->logger = $logger;
        $this->registry = $registry;
        $this->customerSession = $customerSession;
    }

    /**
     * @param                   $subject
     * @param CustomerInterface $customer
     * @param null              $passwordHash
     *
     * @return array
     */
    public function beforeSave($subject, CustomerInterface $customer, $passwordHash = null)
    {
        $this->logger->debug("[CustomerRepository::beforeSave] START");
        $this->logger->debug(
            "[CustomerRepository::beforeSave] getUseGroupAssignment: "
                             . (int)$this->configHelper->getUseGroupAssignment()
        );
        if ((int)$customer->getDefaultBilling() > 0
           && $this->configHelper->getUseGroupAssignment()
            && !$this->registry->registry('euvat_groupassign_customersave')
        ) {
            $this->logger->debug("[CustomerRepository::beforeSave] defaultBilling: " . $customer->getDefaultBilling());
            try {
                $billingAddress = $this->addressRepository->getById($customer->getDefaultBilling());
                $vatValidation = $this->validationRepository->getByVatId($billingAddress->getVatId());
                if (!$vatValidation) {
                    $vatValidation = $this->validationFactory->create();
                }

                $isDAGC = $customer->getDisableAutoGroupChange();
                $isExcludedGroup = $this->configHelper->isExcludedGroup($customer->getGroupId());
                $this->logger->debug("Current customer group: " . $customer->getGroupId());
                if (!$isDAGC && !$isExcludedGroup) {
                    $groupId = $this->functionsHelper->getCustomerGroup($billingAddress, $vatValidation);
                    $this->logger->debug("Assigning group $groupId");
                    $this->registry->register('euvat_groupassign_customersave', true);
                    $customer->setGroupId($groupId);
                    $this->customerSession->setCustomerGroupId($groupId);
                } else {
                    $this->logger->debug("No assignment.");
                    $this->logger->debug("auto group change is disabled: " . $isDAGC);
                    $this->logger->debug("group is excluded: " . $isExcludedGroup);
                }
            } catch (LocalizedException $e) {
                $this->logger->debug($e);
            }
        }
        $this->logger->debug("[CustomerRepository::beforeSave] END");
        return [$customer, $passwordHash];
    }
}
